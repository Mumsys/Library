<?xml version="1.0"?>
<ruleset name="Mumsys2">
    <description>Mumsys2 based on Zend Framework 1, some of PSR 1 and PSR2. Made for more readability of code. Some sets are too close some too open for me.</description>


    <!-- Include some sniffs from all around the place -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>
    
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    
        
     <!-- 2.3 Lines -->
     
    
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
    
    <!-- PHP code MUST use only UTF-8 without BOM. -->
    <rule ref="Generic.Files.ByteOrderMark"/>
    
     <!-- Use Unix newlines -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>
    
    <!-- Lines can be 80 chars long. Show warning at 90, show errors at 120 chars -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="90"/>
            <property name="absoluteLineLimit" value="120"/>
        </properties>
        <!-- Alternativ for automated processs: show only errors when 120 chars exeed, otherwise show noting -->
        <!-- 
        <properties>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="0"/>
        </properties>
        -->
    </rule>
   
    <!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>
    <!-- check for spases on file start and close -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
        <severity>10</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
        <severity>10</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>10</severity>
    </rule>
 
 
    <!-- There MUST NOT be more than one statement per line. $a=1;$c=3;.. -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    
    
     <!-- 2.4 Indenting -->
     
     
    <!-- Code MUST use an indent of 4 spaces, and MUST NOT use tabs for indenting. -->
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="ignoreIndentationTokens" type="array" value="T_COMMENT,T_DOC_COMMENT_OPEN_TAG"/>
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
 
 
    <!-- Keywords and True/False/Null -->

    <!-- PHP keywords MUST be in lower case. eg foreach ( $x AS ...) errors -->
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <!-- The PHP constants true, false, and null MUST be in lower case. -->
    <rule ref="Generic.PHP.LowerCaseConstant"/>
 
 
    
    <!-- Visibility MUST be declared on all methods. -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
 
    <!-- Class constants MUST be declared in all upper case with underscore separators. -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
     
    <!-- Method names MUST NOT be declared with a space after the method name. The opening brace MUST go on its own line, and the closing brace MUST go on the next line following the body. There MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->
    <!-- checked in Methods/FunctionClosingBraceSniff -->
    <!--<rule ref="Squiz.Functions.FunctionDeclaration"/>-->
    <!--<rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>-->
    
    <!-- In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
    <!-- too strict for mumsys! -->
    <!--    
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
             e.g: value 1 for: x = y, value 0: x=y
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
        <severity>0</severity>
    </rule>
    -->
    
 
    <rule ref="PEAR.Classes.ClassDeclaration"/>
    <rule ref="PEAR.ControlStructures.ControlSignature"/>
    
    <!--    Disabled for Mumsys to ignore -->
    <!-- Only one argument per line in multi-line function calls -->
    <!-- To set as must have, eg: is_array( $x ) and not is_array($x) use this: -->
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <properties>
            <!-- default: false -->
            <property name="allowMultipleArguments" value="true"/> 
            <!-- default: 0 -->
            <property name="requiredSpacesAfterOpen" value="1"/>
            <!-- default: 0 -->
            <property name="requiredSpacesBeforeClose" value="1"/>
        </properties>
    </rule>

     <!-- Method arguments with default values MUST go at the end of the argument list. -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>
    
    <!--Not for mumsys in mthodes declaration-->
    <!-- Argument lists MAY be split across multiple lines, where each subsequent line is indented once.
    When doing so, the first item in the list MUST be on the next line, and there MUST be only one 
    argument per line. When the argument list is split across multiple lines, the closing parenthesis 
    and opening brace MUST be placed together on their own line with one space between them. -->
    <!--<rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>-->
    
    
 
    <!--to be checked for mumsys switch() { vs. switch()\n{ ... -->
    <!--<rule ref="Squiz.ControlStructures.ControlSignature"/>-->

    
     <!-- The body of each structure MUST be enclosed by braces. This standardizes how the structures look, 
    and reduces the likelihood of introducing errors as new lines get added to the body. 
    eg: if (true)\n    echo 1;\nelse\n    echo 2; without {} -->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
 
    <rule ref="PEAR.WhiteSpace.ScopeClosingBrace"/>
    <rule ref="Squiz.Functions.GlobalFunction"/>

</ruleset>
