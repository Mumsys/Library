<?php

// $Id$


/**
 * Test class for Mumsys_Db_Driver_Mysql.
 * Generated by PHPUnit on 2011-09-14 at 23:58:10.
 */
class Mumsys_Db_Driver_Mysql_MysqlTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Mumsys_Db_Driver_Mysql_Mysql
     */
    protected $_object;
    protected $_dbConfig;
    protected $_dbc;
    protected $_config;
    private $_tempTable;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if (PHP_VERSION_ID > 70000) {
            $this->markTestSkipped('only for php < 7');
            return false;
        }

        $this->_configs = $this->_config = MumsysTestHelper::getConfig();
        $this->_configs['database']['charset'] = 'latin1';
        $this->_configs['database']['type'] = 'mysql:mysql';
        $this->_configs['database']['debug'] = true;

        $this->_dbConfig = $this->_configs['database'];

        //$this->_object = Mumsys_Db::getInstance($this->_configs['database']);
        $this->_object = new Mumsys_Db_Driver_Mysql_Mysql($this->_dbConfig);
        $this->_dbc = $this->_object->connect();

        $this->_tempTable = 'mumsysunittesttemp';
        $this->_createTempTable($this->_tempTable);
        $this->_createTempTableData($this->_tempTable);
    }


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->_object->close();
        $this->_object = null;
    }


    /**
     * @covers Mumsys_Db_Driver_Abstract::__construct
     */
    public function test_Construct()
    {
        $dbConfig = $this->_dbConfig;
        $dbConfig['socket'] = false;
        $object = new Mumsys_Db_Driver_Mysql_Mysql($dbConfig);
        $this->assertInstanceOf('Mumsys_Db_Driver_Interface', $object);
    }


    /**
     * __get is replaced with new methodes as follows in this test
     * @covers Mumsys_Db_Driver_Mysql_Mysql::getDbName
     * @covers Mumsys_Db_Driver_Mysql_Mysql::getDebugMode
     * @covers Mumsys_Db_Driver_Mysql_Mysql::getErrorMessage
     * @covers Mumsys_Db_Driver_Mysql_Mysql::getErrorCode
     * @covers Mumsys_Db_Driver_Mysql_Mysql::getErrors
     * @covers Mumsys_Db_Driver_Mysql_Mysql::getQuery
     * @covers Mumsys_Db_Driver_Mysql_Mysql::getQueryStmts
     * @covers Mumsys_Db_Driver_Mysql_Mysql::getNumQuerys
     * @covers Mumsys_Db_Driver_Mysql_Mysql::getQueryCompareValues
     * @covers Mumsys_Db_Driver_Mysql_Mysql::getQueryOperators
     */
    public function test_getter()
    {
        $this->assertEquals($this->_dbConfig['db'], $this->_object->getDbName());
        $this->assertEquals($this->_dbConfig['debug'], $this->_object->getDebugMode());

        $this->assertEquals('', $this->_object->getErrorMessage());
        $this->assertEquals(0, $this->_object->getErrorCode());

        $this->assertEquals(array(), $this->_object->getErrors());

        $sql = 'INSERT INTO mumsysunittesttemp SET ida = 3, idb = 3, idc = 3, '
            . 'texta=\'texta3\', textb=\'textb3\'';
        $this->assertEquals($sql, $this->_object->getQuery());
        $sqlList = $this->_object->getQueryStmts();

        $this->assertGreaterThan(3, count($sqlList));
        // creat table + 3 records = 4
        $this->assertEquals(4, $this->_object->getNumQuerys());

        $cmp = array(
            'AND' => array(_CMS_AND, _CMS_AND),
            'OR' => array(_CMS_OR, _CMS_OR),
        );
        $this->assertEquals($cmp, $this->_object->getQueryCompareValues());

        $operators = array(
            '=' => array('==', _CMS_ISEQUAL),
            '>' => array('&gt;', _CMS_ISGREATERTHAN),
            '<' => array('&lt;', _CMS_ISLESSTHAN),
            '>=' => array('&gt;=', _CMS_ISGREATERTHANOREQUAL),
            '<=' => array('&lt;=', _CMS_ISLESSTHANOREQUAL),
            '!=' => array('!=', _CMS_ISNOTEQUAL),
            'LIKE' => array(_CMS_CONTAINS, _CMS_CONTAINS),
            'NOTLIKE' => array(_CMS_CONTAINS_NOT, _CMS_CONTAINS_NOT),
            'xLIKE' => array(_CMS_ENDSWITH, _CMS_ENDSWITH),
            'xNOTLIKE' => array(_CMS_ENDSNOTWITH, _CMS_ENDSNOTWITH),
            'LIKEx' => array(_CMS_BEGINSWITH, _CMS_BEGINSWITH),
            'NOTLIKEx' => array(_CMS_BEGINSNOTWITH, _CMS_BEGINSNOTWITH),
        );
        $this->assertEquals($operators, $this->_object->getQueryOperators());
    }


    // for code coverage
    public function test_setError()
    {
        // error
        $this->_object->setThrowErrors(false);
        $this->_object->setDebugMode(true);

        ob_start();
        $actual = $this->_object->fetchData('SELECT colNotExists');
        $output = ob_get_clean();

        $this->assertFalse($actual);

        $msg = 'debug output: Mumsys_Db_Driver_Mysql_Mysql::_setError Error: '
            . 'Unknown column \'colNotExists\' in \'field list\'; code: '
            . '1054<br />' . PHP_EOL . 'SELECT colNotExists' . PHP_EOL;
        $this->assertEquals($msg, $output);
    }

    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::connect
     */
    public function testConnect()
    {
        $actual = $this->_object->connect();
        $this->assertTrue(is_resource($actual));
        $this->_object->close();

        // basicly: connection problems
        $this->_dbConfig['host'] = 'noHostToFind.no';
        $this->_object = new Mumsys_Db_Driver_Mysql_Mysql($this->_dbConfig);
        $this->_object->setThrowErrors(true);
        $this->_object->setDebugMode(false);
        // without a message because of ini setting are different;
        $this->setExpectedException('Mumsys_Db_Exception');
        $this->_object->connect();
    }

    /**
     * throw exception even if setThrowErrors(false)
     */
//    public function testConnect2Exception()
//    {
//        $this->_object->setThrowErrors(true);
//        $this->_object->setDebugMode(true);
//
//        // invalid db
//        $this->_dbConfig['db'] = 'dbDoNotExists';
//        $this->_object = new Mumsys_Db_Driver_Mysql_Mysql($this->_dbConfig);
//        $this->_object->setDebugMode(false);
//        $this->_object->setThrowErrors(false);
//
//        $this->setExpectedException(
//            'Mumsys_Db_Exception',
//            'Can\'t select db. Access denied for user \'mumsys2\'@\'192.168.1.101\' to database \'dbDoNotExists\'');
//        $this->_object->connect();
//    }

    /**
     * throw exception when if setThrowErrors(true)
     */
    public function testConnect2ExceptionB()
    {
        // invalid db
        $this->_dbConfig['db'] = 'dbDoNotExists';
        $this->_object = new Mumsys_Db_Driver_Mysql_Mysql($this->_dbConfig);
        $this->_object->setThrowErrors(true);
        $this->_object->setDebugMode(false);

        $this->setExpectedException('Mumsys_Db_Exception');
        $this->_object->connect();
    }


    public function testConnectWithCharset()
    {
        $this->_dbConfig['charset'] = 'utf8';
        $this->_object = new Mumsys_Db_Driver_Mysql_Mysql($this->_dbConfig);
        $actual = $this->_object->connect();
        $this->assertTrue(is_resource($actual));
    }

    /**
     * @covers Mumsys_Db_Driver_Abstract::__construct
     * @covers Mumsys_Db_Driver_Mysql_Mysql::connect
     */
    public function testConnectCompressed()
    {
        $this->_dbConfig['compress'] = true;
        $this->_object = new Mumsys_Db_Driver_Mysql_Mysql($this->_dbConfig);
        $actual = $this->_object->connect();
        $this->assertTrue(is_resource($actual));
    }

    public function testConnect_failA()
    {
        // invalid dbc
        $this->_dbConfig['host'] = 'noHostToFind.no';
        $this->_object = new Mumsys_Db_Driver_Mysql_Mysql($this->_dbConfig);
        $this->_object->setThrowErrors(false);
        $this->_object->setDebugMode(false);

        $this->setExpectedException('Mumsys_Db_Exception');
        $actual = $this->_object->connect();
    }

    public function testSelectDB()
    {
        $actual = $this->_object->selectDB($this->_dbConfig['db']);
        $this->assertTrue($actual);

        $actual = $this->_object->selectDB('information_schema');
        $this->assertTrue($actual);

        $this->_object->setThrowErrors(false);
        $this->_object->setDebugMode(false); // disable debug output

        $actual = $this->_object->selectDB('notExistingDatabase');
        $this->assertFalse($actual);
    }


    public function testSelectDBException()
    {
        $this->_object->setThrowErrors(true);
        $this->_object->setDebugMode(false); // disable debug output
        $this->setExpectedException('Mumsys_Db_Exception');
        $actual = $this->_object->selectDB('notExistingDatabase');
    }


    public function testClose()
    {
        $this->assertTrue($this->_object->close());
    }

    public function testGetCharset()
    {
        // returns the default charset, connection was made in setup()
        $this->assertEquals('latin1', $this->_object->getCharset());
    }


    public function testGetCharsetException()
    {
        $this->_object->setDebugMode(false); // disable debug output
        $this->_object->setThrowErrors(false);
        $dbc = $this->_object->connect();
        mysql_close($dbc);
        $this->assertFalse($this->_object->getCharset());

        $this->_object->setThrowErrors(true);
        $this->setExpectedException(
            'Mumsys_Db_Exception', 'Getting character set failt');
        $this->_object->getCharset();
    }


    public function testSetCharset()
    {
        $actual = $this->_object->setCharset('utf8');
        $this->assertEquals('utf8', $this->_object->getCharset());
    }


    public function testSetCharsetException()
    {
        $charset = 'noCharSet';
        $this->_object->setDebugMode(false); // disable debug output
        $this->_object->setThrowErrors(false);
        $actual = $this->_object->setCharset($charset);
        $this->assertFalse($actual);

        $this->_object->setThrowErrors(true);
        $this->setExpectedException(
            'Mumsys_Db_Exception', 'Setting client character set failt');
        $this->_object->setCharset($charset);
    }


    public function testIsError()
    {
        $resource = $this->_object->connect();
        $this->assertFalse($this->_object->isError($resource));
        // re check. is a error:
        $this->assertTrue($this->_object->isError(false));
    }


    public function testQuery()
    {
        $actual = $this->_object->query('SELECT 1+1');
        $this->assertInstanceof('Mumsys_Db_Driver_Result_Interface', $actual);

        // query error
        $this->_object->setThrowErrors(false);
        $this->_object->setDebugMode(false); // disable debug output

        $actual = $this->_object->query('SELECT cloNotExists');
        $this->assertFalse($actual);

        // reconnect for code coverage
        $this->_object->close();
        $actual = $this->_object->query('SELECT 1+1');
        $nums = $actual->fetch('num');
        $this->assertInstanceof('Mumsys_Db_Driver_Result_Interface', $actual);
        $this->assertEquals('2', $nums[0]);

        // empty querys
        $actual = $this->_object->query(false);
        $this->assertFalse($actual);

        $this->_object->setThrowErrors(true);
        $this->_object->setDebugMode(false); // disable debug output
        $this->setExpectedException(
            'Mumsys_Db_Exception', 'Query empty. Cant not query empty sql statment.'
        );
        $this->_object->query(false);
    }


    // for code coverage
    public function testQueryNoConnection()
    {
        $this->_dbConfig['host'] = 'noHostToFind.no';
        $object = new Mumsys_Db_Driver_Mysql_Mysql($this->_dbConfig);
        $object->setThrowErrors(false);
        $object->setDebugMode(false);

        $this->setExpectedException('Mumsys_Db_Exception', 'Connection to database failed. Please check configuration.');
        $actual = $object->query('SELECT 1+1');
    }


    public function testQuery2()
    {
        $this->_object->setDebugMode(false); // disable debug output

        $serverinfo = $this->_object->getServerInfo();
        if (preg_match('/mariadb/i', $serverinfo)) {
            $errorMsg = 'You have an error in your SQL syntax; check the '
                . 'manual that corresponds to your MariaDB server version for '
                . 'the right syntax to use near \'false\' at line 1';
        } else if (preg_match('/mysql/i', $serverinfo)) {
            $errorMsg = 'You have an error in your SQL syntax; check the '
                . 'manual that corresponds to your MySQL server version for '
                . 'the right syntax to use near \'false\' at line 1';
        } else {
            $errorMsg = null;
        }

        $this->setExpectedException('Mumsys_Db_Exception', $errorMsg);
        $this->_object->query('false');
    }


    public function testQueryUnbuffered()
    {
        $actual = $this->_object->queryUnbuffered('SELECT 1+1');
        $this->assertInstanceof('Mumsys_Db_Driver_Mysql_Mysql_Result', $actual);

        $this->_object->setDebugMode(false); // disable debug output
        $this->setExpectedException(
            'Mumsys_Db_Exception', 'Query empty. Cant not query empty sql statment.'
        );
        $this->_object->queryUnbuffered(false);
    }


    public function testQueryUnbuffered2()
    {
        $this->_object->setDebugMode(false); // disable debug output

        $serverinfo = $this->_object->getServerInfo();
        if (preg_match('/mariadb/i', $serverinfo)) {
            $errorMsg = 'You have an error in your SQL syntax; check the '
                . 'manual that corresponds to your MariaDB server version for '
                . 'the right syntax to use near \'false\' at line 1';
        } else if (preg_match('/mysql/i', $serverinfo)) {
            $errorMsg = 'You have an error in your SQL syntax; check the '
                . 'manual that corresponds to your MySQL server version for '
                . 'the right syntax to use near \'false\' at line 1';
        } else {
            $errorMsg = null;
        }

        $this->setExpectedException('Mumsys_Db_Exception', $errorMsg);
        $this->_object->queryUnbuffered('false');
    }


    public function testShowDBs()
    {
        $actual = $this->_object->showDBs();

        $expected = array();
        $sql = 'SHOW DATABASES';
        $res = mysql_query($sql, $this->_dbc);
        while ( $row = mysql_fetch_row($res) ) {
            $expected[$row[0]] = $row[0];
        }

        $this->assertEquals($expected, $actual);
    }


    public function testShowTables()
    {
        $actual = $this->_object->showTables($this->_dbConfig['db']);

        $expected = array();
        $sql = 'SHOW TABLES FROM ' . $this->_dbConfig['db'];
        $res = mysql_query($sql, $this->_dbc);
        while ( $row = mysql_fetch_row($res) ) {
            $expected[$row[0]] = $row[0];
        }

        $this->assertEquals($expected, $actual);
    }


    public function testStat()
    {
        $actual = $this->_object->stat();
        $expected = mysql_stat($this->_dbc);
        $this->assertEquals($expected, $actual);

        $this->_object->close();
        $actual = $this->_object->stat();
        $this->assertFalse($actual);
    }


    public function testSqlError()
    {
        $actual = $this->_object->sqlError();
        $expected = mysql_error($this->_dbc);

        $this->assertEquals($expected, $actual);
    }


    public function testSqlErrno()
    {
        $actual = $this->_object->sqlErrno();
        $expected = mysql_errno($this->_dbc);

        $this->assertEquals($expected, $actual);
    }


    public function testFetchData()
    {
        $sql = 'SELECT 99 AS id, 123 as value';

        $obj = new stdClass();
        $obj->id = 99;
        $obj->value = 123;

        $array = array(array(0 => 99, 1 => 123, 'id' => 99, 'value' => 123));
        $num = array(array(0 => 99, 1 => 123));
        $getIDs = array(0 => 99);
        $assoc = array(array('id' => 99, 'value' => 123));
        $line = array('id' => 99, 'value' => 123);
        $row = array(0 => 99, 1 => 123);
        $keyGoVal = array(99 => 123);
        $keyGoKey = array(99 => 99);
        $keyGoAssoc = array(99 => $line);

        $tests = array(
            'OBJECT' => array($obj),
            'ARRAY' => $array,
            'NUM' => $num,
            'GETIDS' => $getIDs,
            'ASSOC' => $assoc,
            'LINE' => $line,
            'ROW' => $row,
            'KEYGOVAL' => $keyGoVal,
            'KEYGOKEY' => $keyGoKey,
            'KEYGOASSOC' => $keyGoAssoc,
            'defaultOrUnknown' => $assoc,
        );

        foreach ( $tests as $rule => $expected ) {
            $actual = $this->_object->fetchData($sql, $rule);
            $this->assertEquals($expected, $actual);
        }

        // error
        $this->_object->setThrowErrors(false);
        $this->_object->setDebugMode(false);
        $actual = $this->_object->fetchData('SELECT colNotExists', $rule);
        $this->assertFalse($actual);
    }


    /**
     * @todo improve for 100% code coveage
     * @covers Mumsys_Db_Driver_Mysql_Mysql::showColumns
     */
    public function testShowColumns()
    {
        $this->_object->setDebugMode(false); // disable debug output

        $expectedA = $this->_getTempTableColumnValues($this->_tempTable);

        $actualA = $this->_object->showColumns($this->_tempTable);
        $this->assertEquals($expectedA, $actualA);

        $this->_object->setThrowErrors(false);

        $actualAA = $this->_object->showColumns('tableNotExists');
        $this->assertFalse($actualAA);

        $actualB = $this->_object->showColumns($this->_tempTable, 'ida');
        $this->assertEquals(array($expectedA[0]), $actualB);

        $actualC = $this->_object->showColumns($this->_tempTable, 'fieldNotExists');
        $this->assertFalse($actualC); // php mysql_query() bughandle in class

        $actualE = $this->_object->showColumns();
        $this->assertFalse($actualE);

        $this->_object->setThrowErrors(true);

        $serverinfo = $this->_object->getServerInfo();
        if (preg_match('/mariadb/i', $serverinfo)) {
            $errorMsg = 'You have an error in your SQL syntax; check the '
                . 'manual that corresponds to your MariaDB server version for '
                . 'the right syntax to use near \'\' at line 1';
        } else if (preg_match('/mysql/i', $serverinfo)) {
            $errorMsg = 'You have an error in your SQL syntax; check the '
                . 'manual that corresponds to your MySQL server version for '
                . 'the right syntax to use near \'\' at line 1';
        } else {
            $errorMsg = null;
        }
        $this->setExpectedException('Mumsys_Db_Exception', $errorMsg);
        $this->_object->showColumns();
    }

    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::showColumns
     */
    public function testShowColumnsExceptionA()
    {
        $this->_object->setThrowErrors(true);
        $this->_object->setDebugMode(false); // disable debug output
        $this->setExpectedException('Mumsys_Db_Exception',  'Table \'mumsys2.tableNotExists\' doesn\'t exist');
        $this->_object->showColumns('tableNotExists');
    }

    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::showColumns
     */
    public function testShowColumnsExceptionB()
    {
        $this->_object->setThrowErrors(true);
        $this->_object->setDebugMode(false); // disable debug output
        $this->setExpectedException(
            'Mumsys_Db_Exception',
            'Error getting columns. Does the columne "fieldNotExists" exists?'
        );
        $this->_object->showColumns($this->_tempTable, 'fieldNotExists');
    }

//    public function testToggleIDs()
//    {
//        $db = $this->_dbConfig['db'];
//
//        // 1 goes 2, 2 goes 1
//        $this->_object->toggleIDs(
//            $db, $this->_tempTable, 'ida', $idFrom = 1, $idTo = 2, 'idc >= 1'
//        );
//        // 3 goes 2, 2 goes 3
//        $this->_object->toggleIDs(
//            $db, $this->_tempTable, 'ida', $idFrom = 3, $idTo = 2, ''
//        );
//        // 3 goes 1, 1 goes 3
//        $this->_object->toggleIDs(
//            $db, $this->_tempTable, 'ida', $idFrom = 3, $idTo = 1, ''
//        );
//
//        $actual = $this->_object->fetchData(
//            'SELECT * FROM ' . $this->_tempTable . '', 'ASSOC'
//        );
//        $expected = array(
//            array(
//                'ida' => '1',
//                'idb' => '1',
//                'idc' => '1',
//                'idd' => '0',
//                'numa' => '0.0000',
//                'numb' => '0.0000',
//                'numc' => '0.0000',
//                'numd' => '0',
//                'vartexta' => 'a',
//                'vartextb' => '',
//                'texta' => 'texta1',
//                'textb' => 'textb1',
//                'textc' => '',
//                'textd' => '',
//            ),
//            array(
//                'ida' => '3',
//                'idb' => '2',
//                'idc' => '2',
//                'idd' => '0',
//                'numa' => '0.0000',
//                'numb' => '0.0000',
//                'numc' => '0.0000',
//                'numd' => '0',
//                'vartexta' => 'a',
//                'vartextb' => '',
//                'texta' => 'texta2',
//                'textb' => 'textb2',
//                'textc' => '',
//                'textd' => '',
//            ),
//            array(
//                'ida' => '2',
//                'idb' => '3',
//                'idc' => '3',
//                'idd' => '0',
//                'numa' => '0.0000',
//                'numb' => '0.0000',
//                'numc' => '0.0000',
//                'numd' => '0',
//                'vartexta' => 'a',
//                'vartextb' => '',
//                'texta' => 'texta3',
//                'textb' => 'textb3',
//                'textc' => '',
//                'textd' => '',
//            ),
//        );
//
//        $this->assertEquals($expected, $actual);
//
//        $this->_object->setThrowErrors(false);
//        $this->_object->setDebugMode(false);
//        $result = $this->_object->toggleIDs($db, $this->_tempTable);
//        /** @todo api change in class! should return false */
//        $this->assertTrue($result);
//
//        $this->_object->setThrowErrors(true);
//        $this->_object->setDebugMode(false);
//        $this->setExpectedException('Mumsys_Db_Exception', 'Toggle IDs failt');
//        $result = $this->_object->toggleIDs($db, $this->_tempTable);
//    }


    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::update
     * @covers Mumsys_Db_Driver_Mysql_Mysql::_save
     */
    public function testUpdate()
    {
        // update one
        $params['fields'] = array(
            'texta' => 'textaNew', 'textb' => 'null', 'textc' => 'now()'
        );
        $params['table'] = $this->_tempTable;
        $params['where'] = array(
            'AND' => array(
                array('=' => array('ida' => '1')),
                array('=' => array('ida' => 1)), // with nummeric array key
            )
        );
        $this->_object->update($params);
        $queryA = $this->_object->getQuery();

        $actual = $this->_object->fetchData(
            'SELECT * FROM ' . $this->_tempTable . ' WHERE ida = 1', 'ASSOC'
        );
        $this->assertEquals(
            'UPDATE mumsysunittesttemp SET `texta`=\'textaNew\',`textb`=NULL,'
            . '`textc`=NOW() WHERE (`ida`=\'1\' AND `ida`=1)',
            $queryA
        );
        $this->assertEquals('textaNew', $actual[0]['texta']);
        $this->assertEquals('', $actual[0]['textb']);
        $this->assertRegExp(
            MUMSYS_REGEX_DATETIME_MYSQL, $actual[0]['textc']
        );

        // update all
        $params['where'] = array();
        $params['updateall'] = true;
        $params['fields'] = array('textc' => 'textaNew');
        $this->_object->update($params);
        $queryA = $this->_object->getQuery();
        $this->assertEquals(
            'UPDATE mumsysunittesttemp SET `textc`=\'textaNew\' WHERE 1=1',
            $queryA
        );
        $actual = $this->_object->fetchData(
            'SELECT * FROM ' . $this->_tempTable . ' WHERE 1', 'ASSOC'
        );

        foreach ( $actual as $item ) {
            $this->assertEquals('textaNew', $item['textc']);
        }


        // test failure as return
        $this->_object->setDebugMode(false); // hide std out
        $this->_object->setThrowErrors(false);
        $params = array();
        $actual = $this->_object->update($params);
        $this->assertFalse($actual);

        // test failure Exception
        $this->_object->setThrowErrors(true);
        $this->setExpectedException(
            'Mumsys_Db_Exception', 'Unknown key or empty values. No "update" action'
        );
        $this->_object->update($params);
    }


    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::_save
     * @covers Mumsys_Db_Driver_Mysql_Mysql::select
     */
    public function testSelect()
    {
        $params = array(
            'table' => $this->_tempTable,
            'fields' => array('ida', 'idb', 'idc'),
            'where' => array(
                'AND' => array(
                    array('>' => array('ida' => 0)),
                ),
            ),
            'order' => array('ida'=>'ASC'),
            'limit' => array(10)
        );

        $result = $this->_object->select($params);
        $queryA = $this->_object->getQuery();

        $sql = 'SELECT `ida`,`idb`,`idc` FROM mumsysunittesttemp WHERE '
            . '(`ida`>0) ORDER BY `ida` ASC LIMIT 10';
        $expected = $this->_object->fetchData($sql, 'ASSOC');
        $queryB = $this->_object->getQuery();

        $i = 0;
        while ( $row = $result->fetch('assoc') ) {
            $this->assertEquals($expected[$i], $row);
            $i++;
        }
        $this->assertEquals(3, $result->numRows());
        $this->assertEquals($queryA, $queryB);
    }


    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::_save
     * @covers Mumsys_Db_Driver_Mysql_Mysql::insert
     */
    public function testInsert()
    {
        $params = array(
            'table' => $this->_tempTable,
            'fields' => array('ida' => 4, 'idb' => 4, 'idc' => 4),
        );
        $actual = $this->_object->insert($params);
        $this->assertEquals(4, $actual);

        $this->_object->setDebugMode(false); // hide std out
        $this->_object->setThrowErrors(false);
        $actual = $this->_object->insert($params);
        $this->assertFalse($actual);

        $this->_object->setThrowErrors(true);
        $this->setExpectedException(
            'Mumsys_Db_Exception', 'Duplicate entry \'4\' for key \'PRIMARY\''
        );
        $actual = $this->_object->insert($params);
    }

    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::_save
     * @covers Mumsys_Db_Driver_Mysql_Mysql::replace
     */
    public function testReplace()
    {
        $this->_object->setThrowErrors(true);

        // insert test record
        $params = array(
            'table' => $this->_tempTable,
            'fields' => array('ida' => 4, 'idb' => 4, 'idc' => 4),
        );
        $lastInsertId = $this->_object->insert($params);
        $this->assertEquals(4, $lastInsertId);

        // replace test record
        $params = array(
            'table' => $this->_tempTable,
            'fields' => array(
                'ida' => 4, 'textc' => 'lot of text'),
        );
        // affectedRows: 2 -> for the insert (which was found for this id) and
        // one for the replace
        $this->assertEquals(2, $this->_object->replace($params));

        // test replacement
        $select = array(
            'table' => $this->_tempTable,
            'fields' => array('ida', 'idb', 'idc', 'textc'),
            'where' => array('AND' => array(array('=' => array('ida' => 4))))
        );
        $expected = array(
            array('ida' => 4, 'idb' => 0, 'idc' => 0, 'textc' => 'lot of text')
        );
        $result = $this->_object->select($select);
        $this->assertEquals(1, $result->numRows());
        $data = $result->fetchAll('assoc', $result);
        $this->assertEquals($expected, $data);

        // replace failure
        $this->_object->setDebugMode(false);
        $this->_object->setThrowErrors(false);
        $this->assertFalse($this->_object->replace(array()));

        $this->_object->setThrowErrors(true);
        $this->setExpectedException(
            'Mumsys_Db_Exception',
            'Unknown key or empty values. No "replace" action'
        );
        $this->assertFalse($this->_object->replace(array()));
    }


    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::_save
     * @covers Mumsys_Db_Driver_Mysql_Mysql::delete
     */
    public function testDelete()
    {
        $this->_object->setDebugMode(false);

        $params = array(
            'table' => $this->_tempTable,
            'fields' => array(),
            'where' => array(
                'AND' => array(
                    array('=' => array('ida' => 3)),
                )
            )
        );
        $result = $this->_object->delete($params);
        $this->assertEquals(1, $result->affectedRows());
        $expected = $this->_object->fetchData(
            'SELECT * FROM mumsysunittesttemp WHERE 1', 'ASSOC'
        );
        $this->assertEquals(2, count($expected));
    }


    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileQuery
     */
    public function testCompileQuery()
    {
        $optionsA = array(
            // array|empty Cols to be select; default * if empty
            'cols' => array('*'),
            // array|string table(s) to fetch from in inner join if array given
            'table' => 'table',
            // 'a=b AND id = 1',
            'where' => array(
                'AND' => array(
                    array('='=>array('a'=>'b')),
                    array('='=>array('id'=>1)))
            ),
            'having' => 'MAX(col2) = 2', // no having
            'group' => array('id'),
            'order' => array('id'),
            'limit' => array(1, 2),
        );

        $actualA = $this->_object->compileQuery($optionsA);
        $expectedA = 'SELECT * FROM table   WHERE (`a`=\'b\' AND `id`=1) '
            . 'GROUP BY `id` HAVING MAX(col2) = 2  ORDER BY `id` ASC LIMIT 2 OFFSET 1';

        $optionsB = $optionsA;
        $optionsB['cols'] = array('a', 'b', 'c');
        $optionsB['where'] = array(
            'AND' => array(
                array('=' => array('a' => 'value a')),
                array('=' => array('b' => 'value b')),
                array('=' => array('c' => 1)))
        );
        $actualB = $this->_object->compileQuery($optionsB);
        $expectedB = 'SELECT `a`,`b`,`c` FROM table   WHERE (`a`=\'value a\''
            . ' AND `b`=\'value b\' AND `c`=1) GROUP BY `id` HAVING '
            . 'MAX(col2) = 2  ORDER BY `id` ASC LIMIT 2 OFFSET 1';

        // for code coverage:
        $optionsC = $optionsA;
        unset($optionsC['cols']);
        $optionsC['table'] = array(
            'table' => '',
            'table2' => 'table.id = table2.id',
            'table3' => 'table3.id = table2.id'
        );
        $optionsC['having'] = array('MAX(col2) = 2', 'id > 1');
        $optionsC['group'] = array('id', 'col2');
        $optionsC['order'] = array('id' => 'ASC', 'col2' => 'DESC');
        $optionsC['limit'] = array(1,2);

        $actualC = $this->_object->compileQuery($optionsC);
        $expectedC = 'SELECT * FROM table,table2,table3  WHERE '
            . '(table.id = table2.id) AND (table3.id = table2.id) AND (`a`'
            . '=\'b\' AND `id`=1) GROUP BY `id`,`col2` HAVING (MAX(col2) = 2) '
            . 'AND (id > 1)  ORDER BY `id` ASC,`col2` DESC LIMIT 2 OFFSET 1';

        // test
        $this->assertEquals($expectedA, $actualA);
        $this->assertEquals($expectedB, $actualB);
        $this->assertEquals($expectedC, $actualC);

        // error, exception
        $optionsD = $optionsA;
        unset($optionsD['table']);
        $this->_object->setThrowErrors(false);
        $this->_object->setDebugMode(false);
        $actualD = $this->_object->compileQuery($optionsD);
        $this->assertFalse($actualD);

        $this->_object->setThrowErrors(true);
        $this->setExpectedException(
            'Mumsys_Db_Exception', 'No tables given to compile.'
        );
        $actualD = $this->_object->compileQuery($optionsD);
    }

    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileQuerySelect
     */
    public function testCompileQuerySelect()
    {
        $this->_object->setDebugMode(false);
        $this->_object->setThrowErrors(false);

        $fieldsA = array('A', 'B', 'C');
        $fieldsB = array('fieldA' => 'A', 'B', 'C');
        $fieldsC = array(
            '_' => 'count(*) AS cnt, UNIX_TIMESTAMP(tbl3.`dtime`)',
            'dd' => 'D',
            'ee' => 'E',
            'F'
        );
        $fieldsD = array('_' => array('A','b'=>'B')); // test casting errors
        $fieldsE = array('*');

        $actualA = $this->_object->compileQuerySelect($fieldsA);
        $actualB = $this->_object->compileQuerySelect($fieldsB);
        $actualC = $this->_object->compileQuerySelect($fieldsC);
        $actualD = $this->_object->compileQuerySelect($fieldsD);
        $actualE = $this->_object->compileQuerySelect($fieldsE);

        $expectedA = '`A`,`B`,`C`';
        $expectedB = '`A` AS fieldA,`B`,`C`';
        $expectedC = 'count(*) AS cnt, UNIX_TIMESTAMP(tbl3.`dtime`),`D` AS dd,`E` AS ee,`F`';
        $expectedE = '*';

        $this->assertEquals($expectedA, $actualA);
        $this->assertEquals($expectedB, $actualB);
        $this->assertEquals($expectedC, $actualC);
        $this->assertFalse($actualD);
        $this->assertEquals($expectedE, $actualE);

        $this->_object->setThrowErrors(true);

        $this->setExpectedException(
            'Mumsys_Db_Exception',
            'Error casting column "array" to string. '
            . 'Values (json) {"0":"A","b":"B"}'
        );
        $this->_object->compileQuerySelect($fieldsD);
    }

    /**
     * Test escape errors
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileQuerySelect
     */
    public function testCompileQuerySelectErrorA()
    {
        $this->_object->setDebugMode(false);
        $fields = array( array('A'), array('B') );

        $this->setExpectedException(
            'Mumsys_Db_Exception',
            'Escape failt. Not a scalar type: "array"'
        );
        $this->_object->compileQuerySelect($fields);

    }



    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileQuerySet
     */
    public function testCompileQuerySet()
    {
        $fields = array(
            'texta' => 'textaNew', 'textb' => 'null', 'textc' => 'now()'
        );
        $actual = $this->_object->compileQuerySet($fields);
        $expected = ' SET `texta`=\'textaNew\',`textb`=NULL,`textc`=NOW()';
        $this->assertEquals($expected, $actual);
    }


    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileQueryWhere
     * @covers Mumsys_Db_Driver_Mysql_Mysql::_compileQueryWhere
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileSqlExpression
     */
    public function testCompileQueryWhere()
    {
        $array = array();
        $arrayA = array(
            'AND' => array(
                array('=' => array('name' => 'value'))
            )
        );
        $arrayB = array(
            'OR' => array(
                array(
                    'AND' => array(
                        array('=' => array('name' => 'value')),
                        // not quoted
                        array('_' => 'date >= now()'),
                        array('_' => 'string >= \'2000\''),
                        array('=' => array('list' => array(1,2,3,4))),
                        // the following for codecoverage
                        array('=' => array('key' => array('v1','v2'))),
                        array('_' =>
                            array('date <= now()', "date >= '2000-12-31'")
                        ),
                        array('LIKE' => array('like'=>'search')),
                        array('NOTLIKE' => array('notlike'=>'xyz')),
                        array('xLIKE' => array('xlike'=>'xyz')),
                        array('xNOTLIKE' => array('xnotlike'=>'xyz')),
                        array('LIKEx' => array('likex'=>'xyz')),
                        array('NOTLIKEx' => array('notlikex'=>'xyz')),
                    ),
                ),
                array(
                    'AND' => array(
                        array('<=' => array('key' => 'value')),
                    ),
                )
            ),

        );
        // a more realistic test
        $arrayC = array(
            'AND' => array(
                array('=' => array('name' => 'value')),
                array(
                    'OR' => array(
                        array('>=' => array('x' => 123)),
                        array('<=' => array('x' => 567))
                    )
                ),
                array('LIKE' => array('date' => 'foo')),
            )
        );


        $expected = ' WHERE 1=1';
        $expectedA = ' WHERE (`name`=\'value\')';
        $expectedB = ' WHERE (`name`=\'value\' AND date >= now() AND string >= '
            . '\'2000\' AND `list` IN (1,2,3,4) AND `key` IN (\'v1\',\'v2\') '
            . 'AND (date <= now() AND date >= \'2000-12-31\') AND '
            . '`like` LIKE \'%search%\' AND `notlike` NOT LIKE \'%xyz%\' AND '
            . '`xlike` LIKE \'%xyz\' AND `xnotlike` NOT LIKE \'%xyz\' AND '
            . '`likex` LIKE \'xyz%\' AND `notlikex` NOT LIKE \'xyz%\') OR '
            . '(`key`<=\'value\')';
        $expectedC = ' WHERE (`x`>=123 OR `x`<=567) AND (`name`=\'value\' '
            . 'AND `date` LIKE \'%foo%\')';

        $actual = $this->_object->compileQueryWhere($array);
        $actualA = $this->_object->compileQueryWhere($arrayA);
        $actualB = $this->_object->compileQueryWhere($arrayB);
        $actualC = $this->_object->compileQueryWhere($arrayC);

        $this->assertEquals($expected, $actual);
        $this->assertEquals($expectedA, $actualA);
        $this->assertEquals($expectedB, $actualB);
        $this->assertEquals($expectedC, $actualC);
    }

    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileQueryWhere
     * @covers Mumsys_Db_Driver_Mysql_Mysql::_compileQueryWhereSimple
     */
    public function testCompileQueryWhereCompatMode()
    {
        $arrayA = array('name' => 'Name', 'date' => '2000-12-31');
        $arrayB = array('_' => 'name >= \'Name\'', 'date' => '2000-12-31');
        $arrayC = array('escaped = \'value\'');

        $actualA = $this->_object->compileQueryWhere($arrayA);
        $actualB = $this->_object->compileQueryWhere($arrayB);
        $actualC = $this->_object->compileQueryWhere($arrayC);

        $expectedA = ' WHERE `name`=\'Name\' AND `date`=\'2000-12-31\'';
        $expectedB = ' WHERE name >= \'Name\' AND `date`=\'2000-12-31\'';
        $expectedC = ' WHERE escaped = \\\'value\\\'';

        $this->assertEquals($expectedA, $actualA);
        $this->assertEquals($expectedB, $actualB);
        $this->assertEquals($expectedC, $actualC);
    }

    /**
     * error tests and for code coverage
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileQueryWhere
     * @covers Mumsys_Db_Driver_Mysql_Mysql::_compileQueryWhere
     */
    public function testCompileQueryWhereErrorB()
    {
        $array = array(
            'OR' => array(
                    'expression not an array'
                )
        );

        $this->_object->setThrowErrors(false);
        $this->_object->setDebugMode(false);
        $actual = $this->_object->compileQueryWhere($array);
        $this->assertFalse($actual);

        $this->_object->setThrowErrors(true);
        $this->_object->setDebugMode(false);
        $this->setExpectedException(
            'Mumsys_Db_Exception',
            'Invalid sub-expression. Must be \'[operator] => [key/value]\'. '
            . 'Found (json): "expression not an array"'
        );
        $this->_object->compileQueryWhere($array);
    }

    /**
     * Test failure for operator not '_' and key not a string.
     * Other tests in testCompileQueryWhere()
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileSqlExpression
     */
    public function testCompileSqlExpressionErrorA()
    {
        $exprA = array('=' => array(0 => 'value'));

        $this->_object->setThrowErrors(false);
        $this->_object->setDebugMode(false);

        $actualA = $this->_object->compileSqlExpression($exprA);
        $this->assertFalse($actualA);

        $this->_object->setThrowErrors(true);
        $this->setExpectedException(
            'Mumsys_Db_Exception',
            'Invalid expression key "0" for where expression: values (json): "value"'
        );
        $this->_object->compileSqlExpression($exprA);
    }

    /**
     * Test failure for operator not '_' and key/val is a string.
     * Other tests in testCompileQueryWhere()
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileSqlExpression
     */
    public function testCompileSqlExpressionErrorB()
    {
        $exprB = array('=' => 'key/value string');

        $this->_object->setThrowErrors(false);
        $this->_object->setDebugMode(false);

        $actualB = $this->_object->compileSqlExpression($exprB);
        $this->assertFalse($actualB);

        $this->_object->setThrowErrors(true);
        $this->setExpectedException(
            'Mumsys_Db_Exception',
            'Invalid input for where expression. Array expected. Operator: '
            . '"=" values (json): "key\/value string"'
        );
        $this->_object->compileSqlExpression($exprB);
    }

    /**
     * Test failure for exception for IN operator: list values not numeric
     * and not string.
     * Other tests in testCompileQueryWhere()
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileSqlExpression
     */
    public function testCompileSqlExpressionErrorC()
    {
        $exprC = array('=' => array('key' => array(array(1), array(2))));

        $this->_object->setThrowErrors(false);
        $this->_object->setDebugMode(false);

        $actualC = $this->_object->compileSqlExpression($exprC);
        $this->assertFalse($actualC);

        $this->_object->setThrowErrors(true);
        $this->setExpectedException(
            'Mumsys_Db_Exception',
            'Invalid value list for where expression. Strings|numbers '
            . 'expected. operator: "IN" values (json): {"key":[[1],[2]]}'
        );
        $this->_object->compileSqlExpression($exprC);
    }

    /**
     * Test failure for exception for '_' operator: value list not strings
     * Other tests in testCompileQueryWhere()
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileSqlExpression
     */
    public function testCompileSqlExpressionErrorD()
    {
        $exprD = array('_' => array('a < b', array('err < here')));

        $this->_object->setThrowErrors(false);
        $this->_object->setDebugMode(false);

        $actualD = $this->_object->compileSqlExpression($exprD);
        $this->assertFalse($actualD);

        $this->_object->setThrowErrors(true);
        $this->setExpectedException(
            'Mumsys_Db_Exception',
            'Invalid value list for where expression. String expected. '
            . 'Operator: "_" values (json): "["a < b",["err < here"]]"'
        );
        $this->_object->compileSqlExpression($exprD);
    }

    /**
     * Test failure for exception for '_' operator and value not array|string
     * Other tests in testCompileQueryWhere()
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileSqlExpression
     */
    public function testCompileSqlExpressionErrorE()
    {
        $exprE = array('_' => 12345);

        $this->_object->setThrowErrors(false);
        $this->_object->setDebugMode(false);

        $actualE = $this->_object->compileSqlExpression($exprE);
        $this->assertFalse($actualE);

        $this->_object->setThrowErrors(true);
        $this->setExpectedException(
            'Mumsys_Db_Exception',
            'Invalid value for where expression. Array|string expected. '
            . 'Operator: "_" values (json): "12345"'
        );
        $this->_object->compileSqlExpression($exprE);
    }

    /**
     * Test failure for invalid operator
     * Other tests in testCompileQueryWhere()
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileSqlExpression
     */
    public function testCompileSqlExpressionErrorF()
    {
        $expr = array('notExists' => array('key'=>'value'));

        $this->_object->setThrowErrors(false);
        $this->_object->setDebugMode(false);

        $actual = $this->_object->compileSqlExpression($expr);
        $this->assertFalse($actual);

        $this->_object->setThrowErrors(true);
        $this->setExpectedException(
            'Mumsys_Db_Exception',
            'Unknown operator "notExists" to create expression'
        );
        $this->_object->compileSqlExpression($expr);
    }


    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileQueryGroupBy
     */
    public function testCompileQueryGroupBy()
    {
        $groupbyA = array('a','b','c');
        $expectedA = ' GROUP BY `a`,`b`,`c`';
        $actualA = $this->_object->compileQueryGroupBy($groupbyA);
        $this->assertEquals($expectedA, $actualA);
    }

    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileQueryOrderBy
     */
    public function testCompileQueryOrderBy()
    {
        $orderA = array('a','b','c');
        $orderB = array('a'=>'DESC','b'=>'DESC','c'=>'ConvertToASC');

        $expectedA = ' ORDER BY `a` ASC,`b` ASC,`c` ASC';
        $expectedB = ' ORDER BY `a` DESC,`b` DESC,`c` ASC';

        $actualA = $this->_object->compileQueryOrderBy($orderA);
        $actualB = $this->_object->compileQueryOrderBy($orderB);

        $this->assertEquals($expectedA, $actualA);
        $this->assertEquals($expectedB, $actualB);
    }

    /**
     * @covers Mumsys_Db_Driver_Mysql_Mysql::compileQueryLimit
     */
    public function testCompileQueryLimit()
    {
        $limitA = array(0, 10); // return 10 beginning from 0
        $limitB = array(10);// return 10 depending on sortation
        $limitC = array();

        $expectedA = ' LIMIT 10 OFFSET 0';
        $expectedB = ' LIMIT 10';
        $expectedC = '';

        $actualA = $this->_object->compileQueryLimit($limitA);
        $actualB = $this->_object->compileQueryLimit($limitB);
        $actualC = $this->_object->compileQueryLimit($limitC);

        $this->assertEquals($expectedA, $actualA);
        $this->assertEquals($expectedB, $actualB);
        $this->assertEquals($expectedC, $actualC);
        $this->assertEmpty($actualC);
    }


    /** @todo to be improved! */
    public function testSqlImplode()
    {
        // --- setup -----------------------------------------------------------
        $separator = ',';
        $data = array(
            'key' => 'value',
            'a' => 'b',
            'integer' => 123,
            'float' => 1.23,
            'timestamp' => '1970-12-31 23:58:59',
            'mix' => 'mix val',
            'defenum' => 'ab',
            /** @todo // deprecated! api change needed,now 100% code coverage */
//            'deprecated_Test IS NOT NULL' => false,
//            /** @todo asString => false ?? */
//            'suggested_Test' => 'IS NOT NULL', // ->
        );
        $withKeys = true;
        $defaults = array(
            'key' => array('type' => 'char', 'asstring' => true, 'default' => ''),
            'a' => array('type' => 'char', 'asstring' => true, 'default' => ''),
            'integer' => array(
                'type' => 'integer', 'asstring' => false, 'default' => 0
            ),
            'float' => array(
                'type' => 'float', 'asstring' => false, 'default' => 0.00
            ),
            'timestamp' => array(
                'type' => 'timestamp', 'asstring' => true,
                'default' => 'CURRENT_TIMESTAMP'
            ),
            'mix' => array(
                'type' => 'unknown', 'asstring' => true, 'default' => 'a default'
            ),
            'defenum' => array(
                'type' => 'unknown', 'asstring' => true, 'default' => array('a', 'b')
            ),
            'istest' => array(
                /** @todo test value */
                'type' => 'unknown', 'asstring' => false, 'default' => '',
            ),
        );

        $valwrap = '´';
        $keyValWrap = '=';
        $keyWrap = '"';

        // --- end setup -------------------------------------------------------

        $actualA = $this->_object->sqlImplode(
            $separator, $data, $withKeys, $defaults, $valwrap, $keyValWrap, $keyWrap
        );
        $expectedA = '"key"=´value´,"a"=´b´,"integer"=123,"float"=1.23,'
            . '"timestamp"=´1970-12-31 23:58:59´,"mix"=´a default´,'
            . '"defenum"=´a´';

        $this->assertEquals($expectedA, $actualA);

        // test without defaults
        $actualB = $this->_object->sqlImplode(
            $separator, $data, $withKeys, $defaults = array(), $valwrap, $keyValWrap, $keyWrap
        );
        $expectedB = '"key"=´value´,"a"=´b´,"integer"=´123´,'
            . '"float"=´1.23´,"timestamp"=´1970-12-31 23:58:59´,'
            . '"mix"=´mix val´,"defenum"=´ab´'
            . '';
        $this->assertEquals($expectedB, $actualB);


        // test without keys, no defaults: normal implode
        $actualC = $this->_object->sqlImplode(
            $separator, $data, $withKeys = false, $defaults = array(), $valwrap, $keyValWrap, $keyWrap
        );
        $expectedC = 'value,b,123,1.23,1970-12-31 23:58:59,mix val,ab';
        $this->assertEquals($expectedC, $actualC);

        //
        // exception when valWrap is no string
        $this->_object->setDebugMode(false);
        $this->_object->setThrowErrors(false);
        $actual = $this->_object->sqlImplode(
            $separator, $data, $withKeys = true, $defaults = array(), $valwrap = array(), $keyValWrap, $keyWrap
        );
        $this->assertFalse($actual);
        $x = $this->_object->getErrors();
        $message = $x[0]['message'];
        $this->assertEquals(
            'Value could not be used. Value warp: "array"', $message
        );

        // as exception
        $this->_object->setThrowErrors(true);
        $this->setExpectedException(
            'Mumsys_Db_Exception', 'Value could not be used. Value warp: "array"'
        );

        $actual = $this->_object->sqlImplode(
            $separator, $data, $withKeys = true, $defaults = array(), $valwrap = array(), $keyValWrap, $keyWrap
        );
    }


    /**
     * mysql specific test, abstract class need to be tested also!
     */
    public function testEscape()
    {
        $test = array(
            "\x00" => '\0',
            "\x1a" => '\Z',
            '\n' => '\\\n',
            "\n" => "\\n",
            '\r' => '\\\r',
            "\r" => "\\r",
            '\\' => '\\\\',
            'now()' => 'now()',
            'NOW()' => 'NOW()',
            'öäüß?' => 'öäüß?',
        );

        foreach ( $test as $toTest => $expected ) {
            $actual = $this->_object->escape($toTest);
            $this->assertEquals($expected, $actual);
        }

        // with re connect
        $closed = $this->_object->close();
        $this->assertTrue($closed);
        $actual = $this->_object->escape('\n');
        $this->assertEquals('\\\n', $actual);
    }

    /**
     * Test escape errors
     */
    public function testEscapeErrorA()
    {
        $this->_object->setThrowErrors(false);
        $this->_object->setDebugMode(false);

        $toTest = array();

        $this->_object->setThrowErrors(true);
        $this->setExpectedException(
            'Mumsys_Db_Exception', 'Escape failt. Not a scalar type: "array"'
        );
        $this->_object->escape($toTest);
    }

    public function testSaveEscapedCharsetDefaultAndUtf8()
    {
        $object = $this->_object;

        $params = array(
            'fields' => array('texta' => 'öäüß?&$%§'),
            'table' => $this->_tempTable,
            'where' => array('ida' => 1)
        );

        $object->update($params);
        $actualA = $object->getQuery();
        // query in utf8, connection in latin1, ok
        $expectedA = 'UPDATE mumsysunittesttemp SET `texta`=\'öäüß?&$%§\' WHERE `ida`=\'1\'';

        $data = $object->fetchData('SELECT texta FROM mumsysunittesttemp WHERE ida=1', 'LINE');
        $actualB = $data['texta'];
        $expectedB = 'öäüß?&$%§';

        $this->assertEquals($expectedA, $actualA);
        $this->assertEquals($expectedB, $actualB);

        // what is in the DB when using utf8 connection?
        $this->_dbConfig['charset'] = 'utf8';
        $object = new Mumsys_Db_Driver_Mysql_Mysql($this->_dbConfig);

        $data = $object->fetchData('SELECT texta FROM mumsysunittesttemp WHERE ida=1', 'LINE');
        $actualC = $data['texta'];
        $expectedC = 'Ã¶Ã¤Ã¼ÃŸ?&$%Â§'; // crap is correct! if not this will be a problem!

        $this->assertEquals($expectedC, $actualC);
        $this->assertEquals('utf8', $object->getCharset());
    }


    // just quoting!! not escaping!
    public function testQuote()
    {
        $test = array(
            '"' => '\'"\'',
            '\'myQuote\'' => '\'\'myQuote\'\'',
            1234 => 1234
        );

        foreach ( $test as $toTest => $expected ) {
            $actual = $this->_object->quote($toTest);
            $this->assertEquals($expected, $actual);
        }
    }


    //
    // --- tests abstract class -----------------------------------------------
    //

    /**
     * @todo to be checked again
     * @covers Mumsys_Db_Driver_Abstract::__destruct
     */
    public function test__destruct()
    {
        $actual = $this->_object->__destruct();
        $this->assertTrue($actual);
    }


    public function testGetSqlCompareValues()
    {
        $actual = $this->_object->getSqlCompareValues();
        $expected = array(
            'AND' => array(_CMS_AND, _CMS_AND),
            'OR' => array(_CMS_OR, _CMS_OR),
        );

        $this->assertEquals($expected, $actual);
    }


    public function testGetSqlOperators()
    {
        $actual = $this->_object->getSqlOperators();
        $expected = array(
            '=' => array('==', _CMS_ISEQUAL),
            '>' => array('&gt;', _CMS_ISGREATERTHAN),
            '<' => array('&lt;', _CMS_ISLESSTHAN),
            '>=' => array('&gt;=', _CMS_ISGREATERTHANOREQUAL),
            '<=' => array('&lt;=', _CMS_ISLESSTHANOREQUAL),
            '!=' => array('!=', _CMS_ISNOTEQUAL),
            'LIKE' => array(_CMS_CONTAINS, _CMS_CONTAINS),
            'NOTLIKE' => array(_CMS_CONTAINS_NOT, _CMS_CONTAINS_NOT),
            'xLIKE' => array(_CMS_ENDSWITH, _CMS_ENDSWITH),
            'xNOTLIKE' => array(_CMS_ENDSNOTWITH, _CMS_ENDSNOTWITH),
            'LIKEx' => array(_CMS_BEGINSWITH, _CMS_BEGINSWITH),
            'NOTLIKEx' => array(_CMS_BEGINSNOTWITH, _CMS_BEGINSNOTWITH),
        );

        $this->assertEquals($expected, $actual);
    }


    public function testGetErrors()
    {
        $actual = $this->_object->getErrors();
        $expected = array();

        $this->assertEquals($expected, $actual);
    }


    public function testSetThrowErrors()
    {
        $this->_object->setThrowErrors(false);
        $expected = $this->_object->getThrowErrors();
        $this->assertFalse($expected);

        $this->_object->setThrowErrors(true);
        $expected = $this->_object->getThrowErrors();
        $this->assertTrue($expected);
    }


    public function testSetDebugMode()
    {
        $this->_object->setDebugMode(true);
        $this->assertTrue($this->_object->getDebugMode());

        $this->_object->setDebugMode(false);
        $this->assertFalse($this->_object->getDebugMode());
    }


    //
    // --- helper -------------------------------------------------------------
    //

    private function _createTempTable( $table = 'unittesttable' )
    {
        $sql = 'CREATE TEMPORARY TABLE ' . $table . ' (
            ida INT NOT NULL AUTO_INCREMENT,
            idb TINYINT (1) NOT NULL,
            idc smallint (2) NOT NULL,
            idd BIGINT (1) NOT NULL,

            numa float (8,4) UNSIGNED NOT NULL,
            numb decimal (8,4) UNSIGNED NOT NULL,
            numc double (8,4) UNSIGNED NOT NULL,
            -- # max limit by hardware, float without a limit!
            numd float UNSIGNED NOT NULL,

            `vartexta` enum(\'a\',\'b\',\'c\') COLLATE utf8_unicode_ci NOT NULL,
            `vartextb` set(\'a\',\'b\',\'c\') COLLATE utf8_unicode_ci NOT NULL,

            texta CHAR( 255 ) COLLATE utf8_unicode_ci NOT NULL,
            textb VARCHAR( 255 ) COLLATE utf8_unicode_ci NOT NULL,
            textc TEXT COLLATE utf8_unicode_ci NOT NULL,
            textd tinytext COLLATE utf8_unicode_ci NOT NULL,

            PRIMARY KEY (`ida`),
            UNIQUE KEY `texta` (`texta`),
            UNIQUE KEY `textb` (`textb`)
            )';
        $this->_object->query($sql);

        return;
    }


    private function _createTempTableData( $table )
    {
        // insert test data
        $data = array(
            'INSERT INTO ' . $table . ' SET ida = 1, idb = 1, idc = 1, texta=\'texta1\', textb=\'textb1\'',
            'INSERT INTO ' . $table . ' SET ida = 2, idb = 2, idc = 2, texta=\'texta2\', textb=\'textb2\'',
            'INSERT INTO ' . $table . ' SET ida = 3, idb = 3, idc = 3, texta=\'texta3\', textb=\'textb3\'',
        );

        foreach ( $data as $sql ) {
            $this->_object->query($sql);
        }
    }


    private function _getTempTableColumnValues()
    {
        return array(
            array(
                'field' => 'ida',
                'type' => 'int',
                'null' => 'NO',
                'key' => 'PRI',
                'default' => NULL,
                'extra' => 'auto_increment',
                'typeval' => '11',
            ),
            array(
                'field' => 'idb',
                'type' => 'tinyint',
                'null' => 'NO',
                'key' => '',
                'default' => NULL,
                'extra' => '',
                'typeval' => '1',
            ),
            array(
                'field' => 'idc',
                'type' => 'smallint',
                'null' => 'NO',
                'key' => '',
                'default' => NULL,
                'extra' => '',
                'typeval' => '2',
            ),
            array(
                'field' => 'idd',
                'type' => 'bigint',
                'null' => 'NO',
                'key' => '',
                'default' => NULL,
                'extra' => '',
                'typeval' => '1',
            ),
            array(
                'field' => 'numa',
                'type' => 'float',
                'null' => 'NO',
                'key' => '',
                'default' => NULL,
                'extra' => '',
                'typeval' => '8,4',
                'typeattr' => 'unsigned',
            ),
            array(
                'field' => 'numb',
                'type' => 'decimal',
                'null' => 'NO',
                'key' => '',
                'default' => NULL,
                'extra' => '',
                'typeval' => '8,4',
                'typeattr' => 'unsigned',
            ),
            array(
                'field' => 'numc',
                'type' => 'double',
                'null' => 'NO',
                'key' => '',
                'default' => NULL,
                'extra' => '',
                'typeval' => '8,4',
                'typeattr' => 'unsigned',
            ),
            array(
                'field' => 'numd',
                'type' => 'float unsigned',
                'null' => 'NO',
                'key' => '',
                'default' => NULL,
                'extra' => '',
                'typeval' => false,
            ),
            array(
                'field' => 'vartexta',
                'type' => 'enum',
                'null' => 'NO',
                'key' => '',
                'default' => NULL,
                'extra' => '',
                'typeval' => array(
                    0 => '',
                    1 => 'a',
                    2 => 'b',
                    3 => 'c',
                ),
            ),
            array(
                'field' => 'vartextb',
                'type' => 'set',
                'null' => 'NO',
                'key' => '',
                'default' => NULL,
                'extra' => '',
                'typeval' => array(
                    0 => '',
                    1 => 'a',
                    2 => 'b',
                    3 => 'c',
                ),
            ),
            array(
                'field' => 'texta',
                'type' => 'char',
                'null' => 'NO',
                'key' => 'UNI',
                'default' => NULL,
                'extra' => '',
                'typeval' => '255',
            ),
            array(
                'field' => 'textb',
                'type' => 'varchar',
                'null' => 'NO',
                'key' => 'UNI',
                'default' => NULL,
                'extra' => '',
                'typeval' => '255',
            ),
            array(
                'field' => 'textc',
                'type' => 'text',
                'null' => 'NO',
                'key' => '',
                'default' => NULL,
                'extra' => '',
            ),
            array(
                'field' => 'textd',
                'type' => 'tinytext',
                'null' => 'NO',
                'key' => '',
                'default' => NULL,
                'extra' => '',
            ),
        );
    }


}
